{"version":3,"file":"buildMetricTable.worker-fd3ee5e3.js","sources":["../src/components/pivotTable/utils.ts","../src/workers/buildPivotTable.ts","../src/workers/buildMetricTable.worker.js"],"sourcesContent":["import { IRow } from '../../interfaces';\r\nimport { INestNode } from './inteface';\r\n\r\nconst key_prefix = 'nk_';\r\n\r\nfunction insertNode(\r\n    tree: INestNode,\r\n    layerKeys: string[],\r\n    nodeData: IRow,\r\n    depth: number,\r\n    collapsedKeyList: string[],\r\n    sort?: {\r\n        fid: string;\r\n        type: 'ascending' | 'descending';\r\n    }\r\n) {\r\n    if (depth >= layerKeys.length) {\r\n        // tree.key = nodeData[layerKeys[depth]];\r\n        return;\r\n    }\r\n    const key = nodeData[layerKeys[depth]];\r\n    const uniqueKey = `${tree.uniqueKey}__${key}`;\r\n\r\n    let child = tree.children.find((c) => c.key === key);\r\n    if (!child) {\r\n        child = {\r\n            key,\r\n            value: key,\r\n            sort: depth === layerKeys.length - 1 && sort ? nodeData[sort.fid] ?? `_${key}` : key,\r\n            uniqueKey: uniqueKey,\r\n            fieldKey: layerKeys[depth],\r\n            children: [],\r\n            path: [...tree.path, { key: layerKeys[depth], value: key }],\r\n            height: layerKeys.length - depth - 1,\r\n            isCollapsed: false,\r\n        };\r\n        if (collapsedKeyList.includes(tree.uniqueKey)) {\r\n            tree.isCollapsed = true;\r\n        }\r\n        const reverse = depth === layerKeys.length - 1 && sort?.type === 'descending';\r\n        tree.children.splice(binarySearchIndex(tree.children, child.sort, reverse), 0, child);\r\n    }\r\n    insertNode(child, layerKeys, nodeData, depth + 1, collapsedKeyList, sort);\r\n}\r\n\r\n// Custom binary search function to find appropriate index for insertion.\r\nfunction binarySearchIndex(arr: INestNode[], keyVal: string | number, reverse = false): number {\r\n    let start = 0,\r\n        end = arr.length - 1;\r\n\r\n    while (start <= end) {\r\n        let middle = Math.floor((start + end) / 2);\r\n        let middleVal = arr[middle].sort;\r\n        if (typeof middleVal === 'number' && typeof keyVal === 'number') {\r\n            if (reverse !== middleVal < keyVal) start = middle + 1;\r\n            else end = middle - 1;\r\n        } else {\r\n            let cmp = String(middleVal).localeCompare(String(keyVal));\r\n            if (reverse !== cmp < 0) start = middle + 1;\r\n            else end = middle - 1;\r\n        }\r\n    }\r\n    return start;\r\n}\r\n\r\nconst ROOT_KEY = '__root';\r\nconst TOTAL_KEY = '__total';\r\n\r\nfunction insertSummaryNode(node: INestNode): void {\r\n    if (node.children.length > 0) {\r\n        node.children.unshift({\r\n            key: TOTAL_KEY,\r\n            value: `${node.value}(total)`,\r\n            sort: '',\r\n            fieldKey: TOTAL_KEY,\r\n            uniqueKey: `${node.uniqueKey}${TOTAL_KEY}`,\r\n            children: [],\r\n            path: [],\r\n            height: node.children[0].height,\r\n            isCollapsed: true,\r\n        });\r\n        for (let i = 1; i < node.children.length; i++) {\r\n            insertSummaryNode(node.children[i]);\r\n        }\r\n    }\r\n}\r\n\r\nexport function buildNestTree(\r\n    layerKeys: string[],\r\n    data: IRow[],\r\n    collapsedKeyList: string[],\r\n    showSummary: boolean,\r\n    sort?: {\r\n        fid: string;\r\n        type: 'ascending' | 'descending';\r\n    },\r\n    dataWithoutSort?: IRow[]\r\n): INestNode {\r\n    const tree: INestNode = {\r\n        key: ROOT_KEY,\r\n        value: 'root',\r\n        fieldKey: 'root',\r\n        sort: '',\r\n        uniqueKey: ROOT_KEY,\r\n        children: [],\r\n        path: [],\r\n        height: layerKeys.length,\r\n        isCollapsed: false,\r\n    };\r\n    for (let row of data) {\r\n        insertNode(tree, layerKeys, row, 0, collapsedKeyList, sort);\r\n    }\r\n    if (dataWithoutSort) {\r\n        for (let row of dataWithoutSort) {\r\n            insertNode(tree, layerKeys, row, 0, collapsedKeyList, { fid: '', type: sort?.type ?? 'ascending' });\r\n        }\r\n    }\r\n    if (showSummary) {\r\n        insertSummaryNode(tree);\r\n    }\r\n    return tree;\r\n}\r\n\r\nclass NodeIterator {\r\n    public tree: INestNode;\r\n    public nodeStack: INestNode[] = [];\r\n    public current: INestNode | null = null;\r\n    constructor(tree: INestNode) {\r\n        this.tree = tree;\r\n    }\r\n    public first() {\r\n        let node = this.tree;\r\n        this.nodeStack = [node];\r\n        while (node.children.length > 0 && !node.isCollapsed) {\r\n            this.nodeStack.push(node.children[0]);\r\n            node = node.children[0];\r\n        }\r\n        this.current = node;\r\n        return this.current;\r\n    }\r\n    public next(): INestNode | null {\r\n        let cursorMoved = false;\r\n        let counter = 0;\r\n        while (this.nodeStack.length > 1) {\r\n            counter++;\r\n            if (counter > 100) break;\r\n            let node = this.nodeStack[this.nodeStack.length - 1];\r\n            let parent = this.nodeStack[this.nodeStack.length - 2];\r\n            let nodeIndex = parent.children.findIndex((n) => n.key === node!.key);\r\n            if (nodeIndex === -1) break;\r\n            if (cursorMoved) {\r\n                if (node.children.length > 0 && !node.isCollapsed) {\r\n                    this.nodeStack.push(node.children[0]);\r\n                    continue;\r\n                } else {\r\n                    break;\r\n                }\r\n            } else {\r\n                if (nodeIndex < parent.children.length - 1) {\r\n                    this.nodeStack.pop();\r\n                    this.nodeStack.push(parent.children[nodeIndex + 1]);\r\n                    cursorMoved = true;\r\n                    continue;\r\n                }\r\n                if (nodeIndex >= parent.children.length - 1) {\r\n                    this.nodeStack.pop();\r\n                    continue;\r\n                }\r\n            }\r\n        }\r\n        if (cursorMoved) {\r\n            this.current = this.nodeStack[this.nodeStack.length - 1] || null;\r\n        } else {\r\n            this.current = null;\r\n        }\r\n        return this.current;\r\n    }\r\n    public predicates(): { key: string; value: string | number }[] {\r\n        return this.nodeStack\r\n            .filter((node) => node.key !== ROOT_KEY)\r\n            .map((node) => ({\r\n                key: node.fieldKey,\r\n                value: node.value,\r\n            }));\r\n    }\r\n}\r\n\r\nexport function buildMetricTableFromNestTree(leftTree: INestNode, topTree: INestNode, data: IRow[]): (IRow | null)[][] {\r\n    const mat: any[][] = [];\r\n    const iteLeft = new NodeIterator(leftTree);\r\n    const iteTop = new NodeIterator(topTree);\r\n    iteLeft.first();\r\n    while (iteLeft.current !== null) {\r\n        const vec: any[] = [];\r\n        iteTop.first();\r\n        while (iteTop.current !== null) {\r\n            const predicates = iteLeft\r\n                .predicates()\r\n                .concat(iteTop.predicates())\r\n                .filter((ele) => ele.key !== TOTAL_KEY);\r\n            const matchedRows = data.filter((r) => predicates.every((pre) => r[pre.key] === pre.value));\r\n            if (matchedRows.length > 0) {\r\n                // If multiple rows are matched, then find the most matched one (the row with smallest number of keys)\r\n                vec.push(matchedRows.reduce((a, b) => (Object.keys(a).length < Object.keys(b).length ? a : b)));\r\n            } else {\r\n                vec.push(undefined);\r\n            }\r\n            iteTop.next();\r\n        }\r\n        mat.push(vec);\r\n        iteLeft.next();\r\n    }\r\n    return mat;\r\n}\r\n\r\nexport function getAllChildrenSize(node: INestNode, depth: number): number {\r\n    if (depth === 0) {\r\n        return node.children.length;\r\n    }\r\n    return node.children.reduce((acc, child) => acc + getAllChildrenSize(child, depth + 1), 0);\r\n}\r\n","import { INestNode } from '../components/pivotTable/inteface';\r\nimport { buildMetricTableFromNestTree, buildNestTree } from '../components/pivotTable/utils';\r\nimport { IViewField, IRow } from '../interfaces';\r\n\r\nconst getFirsts = (item: INestNode): INestNode[] => {\r\n    if (item.children.length > 0) {\r\n        return [item, ...getFirsts(item.children[0])];\r\n    }\r\n    return [item];\r\n};\r\n\r\nexport function buildPivotTable(\r\n    dimsInRow: IViewField[],\r\n    dimsInColumn: IViewField[],\r\n    allData: IRow[],\r\n    aggData: IRow[],\r\n    collapsedKeyList: string[],\r\n    showTableSummary: boolean,\r\n    sort?: {\r\n        fid: string;\r\n        type: 'ascending' | 'descending';\r\n        mode: 'row' | 'column';\r\n    }\r\n): { lt: INestNode; tt: INestNode; metric: (IRow | null)[][] } {\r\n    let lt: INestNode;\r\n    let tt: INestNode;\r\n    if (sort?.mode === 'row') {\r\n        tt = buildNestTree(\r\n            dimsInColumn.map((d) => d.fid),\r\n            allData,\r\n            collapsedKeyList,\r\n            showTableSummary\r\n        );\r\n        if (dimsInColumn.length > 0) {\r\n            const ks = dimsInColumn.map((x) => x.fid);\r\n            const vs = getFirsts(tt.children[0]).map((x) => x.value);\r\n            // move data of First column to first\r\n            const mentioned: IRow[] = [];\r\n            const rest: IRow[] = [];\r\n            allData.forEach((x) => (ks.every((k, i) => x[k] === vs[i]) ? mentioned.push(x) : rest.push(x)));\r\n            lt = buildNestTree(\r\n                dimsInRow.map((d) => d.fid),\r\n                mentioned,\r\n                collapsedKeyList,\r\n                showTableSummary,\r\n                sort,\r\n                rest\r\n            );\r\n        } else {\r\n            lt = buildNestTree(\r\n                dimsInRow.map((d) => d.fid),\r\n                allData,\r\n                collapsedKeyList,\r\n                showTableSummary,\r\n                sort\r\n            );\r\n        }\r\n    } else {\r\n        lt = buildNestTree(\r\n            dimsInRow.map((d) => d.fid),\r\n            allData,\r\n            collapsedKeyList,\r\n            showTableSummary\r\n        );\r\n        if (sort && dimsInRow.length > 0) {\r\n            const ks = dimsInRow.map((x) => x.fid);\r\n            const vs = getFirsts(lt.children[0]).map((x) => x.value);\r\n            // move data of First row to first\r\n            const mentioned: IRow[] = [];\r\n            const rest: IRow[] = [];\r\n            allData.forEach((x) => (ks.every((k, i) => x[k] === vs[i]) ? mentioned.push(x) : rest.push(x)));\r\n            tt = buildNestTree(\r\n                dimsInColumn.map((d) => d.fid),\r\n                mentioned,\r\n                collapsedKeyList,\r\n                showTableSummary,\r\n                sort,\r\n                rest\r\n            );\r\n        } else {\r\n            tt = buildNestTree(\r\n                dimsInColumn.map((d) => d.fid),\r\n                allData,\r\n                collapsedKeyList,\r\n                showTableSummary,\r\n                sort\r\n            );\r\n        }\r\n    }\r\n\r\n    const metric = buildMetricTableFromNestTree(lt, tt, [...allData, ...aggData]);\r\n    return { lt, tt, metric };\r\n}\r\n","/* eslint no-restricted-globals: 0 */\r\n/* eslint-disable */ \r\nimport { buildPivotTable } from \"./buildPivotTable\"\r\n/**\r\n * @param {import('../interfaces').IViewField[]} dimsInRow\r\n * @param {import('../interfaces').IViewField[]} dimsInColumn\r\n * @param {import('../interfaces').IRow[]} allData\r\n * @param {import('../interfaces').IRow} aggData\r\n * @param {string[]} collapsedKeyList\r\n * @param {boolean} showTableSummary\r\n * @return {{lt: import('../components/pivotTable/inteface').INestNode, tt: import('../components/pivotTable/inteface').INestNode, metric: import('../interfaces').(IRow | null)[][]}}\r\n */\r\n\r\n/**\r\n * @param {MessageEvent<{ dimsInRow: import('../interfaces').IViewField[]; dimsInColumn: import('../interfaces').IViewField[]; allData: import('../interfaces').IRow[]; aggData: import('../interfaces').IRow[]; collapsedKeyList: string[]; showTableSummary: boolean }>} e\r\n */\r\nconst main = e => {\r\n    const { dimsInRow, dimsInColumn, allData, aggData, collapsedKeyList, showTableSummary, sort } = e.data;\r\n    try {\r\n        const ans = buildPivotTable(dimsInRow, dimsInColumn, allData, aggData, collapsedKeyList, showTableSummary, sort);\r\n        self.postMessage(ans);\r\n    } catch (error) {\r\n        self.postMessage({ error: error.message });\r\n    }\r\n};\r\n\r\nself.addEventListener('message', main, false);\r\n"],"names":["insertNode","tree","layerKeys","nodeData","depth","collapsedKeyList","sort","key","uniqueKey","child","c","reverse","binarySearchIndex","arr","keyVal","start","end","middle","middleVal","cmp","ROOT_KEY","TOTAL_KEY","insertSummaryNode","node","i","buildNestTree","data","showSummary","dataWithoutSort","row","NodeIterator","__publicField","cursorMoved","counter","parent","nodeIndex","n","buildMetricTableFromNestTree","leftTree","topTree","mat","iteLeft","iteTop","vec","predicates","ele","matchedRows","r","pre","a","b","getFirsts","item","buildPivotTable","dimsInRow","dimsInColumn","allData","aggData","showTableSummary","lt","tt","d","ks","x","vs","mentioned","rest","k","metric","main","e","ans","error"],"mappings":"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"}